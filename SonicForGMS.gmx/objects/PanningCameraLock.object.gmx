<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>0</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>CameraLock</parentName>
  <maskName>ActiveRegionMaskSprite</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>604</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_inherited</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Initialize
enabled = false;
scroll_hspeed = 2;
scroll_vspeed = 2;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Scroll
var diff;
if (game_is_running()) {
    with (PlayableCharacter) {
        if (sign(other.image_xscale) == sign(x_int - other.x)) {
            other.enabled = true;
        }
        if (other.enabled) {
            bound_left = max(bound_left, min(other.left, view_xview[owner.index]));
            if (bound_left &lt; other.left) {
                bound_left = min(bound_left + other.scroll_hspeed, other.left);
            }
            bound_top = max(bound_top, min(other.top, view_yview[owner.index]));
            if (bound_top &lt; other.top) {
                bound_top = min(bound_top + other.scroll_vspeed, other.top);
            }
            bound_right = min(bound_right, max(other.right, view_xview[owner.index] + view_wview[owner.index]));
            if (bound_right &gt; other.right) {
                bound_right = max(bound_right - other.scroll_hspeed, other.right);
            }
            bound_bottom = min(bound_bottom, max(other.bottom, view_yview[owner.index] + view_hview[owner.index]));
            if (bound_bottom &gt; other.bottom) {
                bound_bottom = max(bound_bottom - other.scroll_vspeed, other.bottom);
            }
            with (camera) {
                bound_left = other.bound_left;
                bound_top = other.bound_top;
                bound_right = other.bound_right;
                bound_bottom = other.bound_bottom;
            }
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
