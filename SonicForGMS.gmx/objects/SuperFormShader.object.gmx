<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>0</visible>
  <depth>-2</depth>
  <persistent>0</persistent>
  <parentName>PlayerEffect</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>604</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_inherited</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Initialize
shader = ColorReplaceShd;
previous_shader = -1;

state = "normal";

total_colors = 4;

normal_color = array_create(total_colors);
transform_color = array_create(total_colors);
super_color = array_create(total_colors);
super_fade_color = array_create(total_colors);

blend_ratio = 0;
blend_offset = 0;
blend_speed = 0.045;
blend_pulse_speed = 0.08;

// shader uniforms
u_color_in = shader_get_uniform(shader, "u_vInputColor");
u_color_out = shader_get_uniform(shader, "u_vOutputColor");
u_tolerance = shader_get_uniform(shader, "u_vTolerance");
u_blend = shader_get_uniform(shader, "u_fBlendFactor");

// inputs
input_color = array_create(total_colors);
output_color = array_create(total_colors);
tolerance = $010101; //$030303; // tolerance color
blend = 0; // blend factor
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>604</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_inherited</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Animate
if (game_is_running()) {
    switch (state) {
    case "rising":
        blend_offset = min(blend_offset + blend_speed, 1);
        blend_ratio = blend_offset;
        for (var n = 0; n &lt; total_colors; ++n) {
            output_color[n] = merge_color(normal_color[n], transform_color[n], blend_ratio);
        }
        if (blend_ratio == 1) {
            state = "pulsating";
        }
        break;
    
    case "pulsating":
        blend_offset += blend_pulse_speed;
        blend_ratio = 0.5 + (sin(blend_offset) * 0.5);
        for (var n = 0; n &lt; total_colors; ++n) {
            output_color[n] = merge_color(super_color[n], super_fade_color[n], blend_ratio);
        }
        break;
    
    case "fading":
        blend_offset = min(blend_offset + blend_speed, 1);
        blend_ratio = blend_offset;
        for (var n = 0; n &lt; total_colors; ++n) {
            output_color[n] = merge_color(transform_color[n], normal_color[n], blend_ratio);
        }
        if (blend_ratio == 1) {
            state = "normal";
            visible = false;
        }
        break;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="11">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Power down
state = "fading";
blend_offset = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Power up
state = "rising";
blend_offset = 0;
visible = true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="77">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Refresh
if (shader_current() == shader) {
    shader_reset();
    if (previous_shader != -1) {
        shader_set(previous_shader);
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="76">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Shade
if (shader_current() != shader) {
    previous_shader = shader_current();
    shader_set(shader);
    shader_set_uniform_color_array(u_color_in, input_color);
    shader_set_uniform_color_array(u_color_out, output_color);
    shader_set_uniform_color(u_tolerance, tolerance);
    shader_set_uniform_f(u_blend, blend);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
