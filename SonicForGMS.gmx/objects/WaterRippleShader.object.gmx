<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>0</visible>
  <depth>1</depth>
  <persistent>0</persistent>
  <parentName>WaterBlend</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>604</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_inherited</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Initialize
image_speed = 0;

x_magnitude = 0; //0.00125;
y_magnitude = 0.002; //0.00125;
x_cycles = 0; //6.126;
y_cycles = 0.1; //6.126;
cycle_speed = 3;
cycle_time = 0;

base_surface = -1;
final_surface = -1;
width = -1;
height = -1;

view_render[MAX_VIEW_COUNT] = false;

shader = RippleShd;

u_resolution = shader_get_uniform(shader, "u_vResolution");
u_magnitude = shader_get_uniform(shader, "u_vMagnitude");
u_cycles = shader_get_uniform(shader, "u_vCycles");
u_time = shader_get_uniform(shader, "u_fTime");
u_texture = shader_get_sampler_index(shader, "u_sTexture");
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Clean up
if (surface_exists(base_surface)) {
    surface_free(base_surface);
}
if (surface_exists(final_surface)) {
    surface_free(final_surface);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>604</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_inherited</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Animate
cycle_time = (game_clock_get_step() / room_speed) * cycle_speed;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Check visibility
visible = false;
for (var n = 0; n &lt; MAX_VIEW_COUNT; ++n) {
    view_render[n] = false;
    if (view_visible[n]) {
        with (Water) {
            if (rectangle_in_view(bbox_left, bbox_top, bbox_right, bbox_bottom, n)) {
                other.view_render[n] = true;
                other.visible = true;
                break;
            }
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="5">
      <action>
        <libid>1</libid>
        <id>203</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>1</exetype>
        <functionname>action_kill_object</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
    </event>
    <event eventtype="8" enumb="73">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw
if (view_render[view_current]) {
    var w = surface_get_width(application_surface);
    var h = surface_get_height(application_surface);
    var color = draw_get_color();
    var previous_shader = shader_current();

    if (not surface_exists(base_surface)) {
        base_surface = surface_create(w, h);
        width = w;
        height = h;
    } else if (width != w or height != h) {
        surface_resize(base_surface, w, h);
        width = w;
        height = h;
    }
    
    var rw = w;
    var rh = h;
    
    with (GameWindow) {
        rw /= width;
        rh /= height;
    }
    
    var vx = view_xport[view_current] * rw;
    var vy = view_yport[view_current] * rh;
    var vw = view_wport[view_current] * rw;
    var vh = view_hport[view_current] * rh;
    
    surface_set_target(base_surface);
    draw_clear_alpha(image_blend, 0);
    if (flashing) {
        draw_set_color(c_white);
        draw_rectangle(vx, vy, vw, vh, false);
    } else {
        draw_surface_part_ext(application_surface, vx, vy, vw, vh, 0, 0, w / vw, h / vh, image_blend, 1);
    }
    surface_reset_target();
    
    if (not surface_exists(final_surface)) {
        final_surface = surface_create(vw, vh);
    }
    
    var x1 = view_xview[view_current];
    var y1 = view_yview[view_current];
    var x2 = x1 + view_wview[view_current];
    var y2 = y1 + view_hview[view_current];
    
    surface_set_target(final_surface);
    draw_clear_alpha(image_blend, 0);
    draw_set_color(c_white);
    shader_set(shader);
    shader_set_uniform_f(u_resolution, view_wview[view_current], view_hview[view_current]);
    shader_set_uniform_f(u_magnitude, x_magnitude, y_magnitude);
    shader_set_uniform_f(u_cycles, x_cycles, y_cycles);
    shader_set_uniform_f(u_time, cycle_time);
    texture_set_stage(u_texture, surface_get_texture(base_surface));
    with (Water) {
        draw_rectangle(bbox_left - x1, bbox_top - y1, bbox_right - x1, bbox_bottom - y1, false);
    }
    shader_reset();
    if (previous_shader != -1) {
        shader_set(previous_shader);
    }
    surface_reset_target();
    draw_surface(final_surface, x1, y1);
    draw_set_color(color);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
