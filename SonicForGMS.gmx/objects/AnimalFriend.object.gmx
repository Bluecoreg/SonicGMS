<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>0</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Destroy off-screen
if (not instance_on_screen(max(sprite_width, sprite_height))) {
    instance_destroy();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Move
if (game_is_running()) {
    if (x_speed != 0) {
        x += (dsin(gravity_direction) * x_speed);
        y += (dcos(gravity_direction) * x_speed);
    }
    if (y_speed != 0) {
        x += (dcos(gravity_direction) * y_speed);
        y -= (dsin(gravity_direction) * y_speed);
    }
    if (abs(y_speed) &lt; gravity_cap) {
        y_speed += gravity_speed;
        if (abs(y_speed) &gt; gravity_cap) {
            y_speed = gravity_cap * sign(y_speed);
        }
    }
    if (time_to_move &gt; 0) {
        --time_to_move;
        if (time_to_move == 0) {
            depth = -2;
            y_speed = starting_jump_force;
            gravity_speed = gravity_force;
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="RightTriangleTerrain">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Bounce
if (game_is_running()) {
    if (y_speed &gt; 0 and not place_meeting(xprevious, yprevious, other.object_index)) {
        y_speed = jump_force;
        if (x_speed == 0) {
            image_xscale = choose(1, -1);
            x_speed = -image_xscale * top_speed;
            event_user(0);
        }
        var sine = dsin(gravity_direction);
        var cosine = dcos(gravity_direction);
        repeat (sprite_height) {
            if (place_meeting(x, y, other.object_index)) {
                x -= cosine;
                y += sine;
            } else {
                break;
            }
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="RectangleTerrain">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Bounce
if (game_is_running()) {
    if (y_speed &gt; 0 and not place_meeting(xprevious, yprevious, other.object_index)) {
        y_speed = jump_force;
        if (x_speed == 0) {
            image_xscale = choose(1, -1);
            x_speed = -image_xscale * top_speed;
            event_user(0);
        }
        var sine = dsin(gravity_direction);
        var cosine = dcos(gravity_direction);
        repeat (sprite_height) {
            if (place_meeting(x, y, other.object_index)) {
                x -= cosine;
                y += sine;
            } else {
                break;
            }
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="QuarterPipeTerrain">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Bounce
if (game_is_running()) {
    if (y_speed &gt; 0 and not place_meeting(xprevious, yprevious, other.object_index)) {
        y_speed = jump_force;
        if (x_speed == 0) {
            image_xscale = choose(1, -1);
            x_speed = -image_xscale * top_speed;
            event_user(0);
        }
        var sine = dsin(gravity_direction);
        var cosine = dcos(gravity_direction);
        repeat (sprite_height) {
            if (place_meeting(x, y, other.object_index)) {
                x -= cosine;
                y += sine;
            } else {
                break;
            }
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="QuarterEllipseTerrain">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Bounce
if (game_is_running()) {
    if (y_speed &gt; 0 and not place_meeting(xprevious, yprevious, other.object_index)) {
        y_speed = jump_force;
        if (x_speed == 0) {
            image_xscale = choose(1, -1);
            x_speed = -image_xscale * top_speed;
            event_user(0);
        }
        var sine = dsin(gravity_direction);
        var cosine = dcos(gravity_direction);
        repeat (sprite_height) {
            if (place_meeting(x, y, other.object_index)) {
                x -= cosine;
                y += sine;
            } else {
                break;
            }
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
