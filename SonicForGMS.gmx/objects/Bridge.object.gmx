<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>Rectangle</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>604</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_inherited</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Intialize
bottom_solid = false;

bridge_width = bbox_right - bbox_left;
node_width = sprite_get_width(sprite_index);
total_nodes = ceil(bridge_width / node_width);
node_ratio = (total_nodes - 1) / (bridge_width - node_width);
tension_node = -1;

tension = 0;
max_tension = 12;
tension_interpolation = 0.2;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Bend
var height;
for (var n = 0; n &lt; total_nodes; ++n) {
    height = tension;
    if (n &lt; tension_node) {
        height *= (n / tension_node);
    } else if (n &gt; tension_node) {
        height *= ((total_nodes - 1 - n) / (total_nodes - 1 - tension_node));
    }
    node_oy[n] = ystart + height;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Elevate
if (game_is_running()) {
    var mean_node = -1;
    var node;

    with (PlayableCharacter) {
        if (ground_id == other) {
            node = clamp(floor((x_int - other.bbox_left) * other.node_ratio), 0, other.total_nodes - 1);
            if (mean_node == -1) {
                mean_node = node;
            } else {
                mean_node = (mean_node + node) div 2;
            }
        }
    }

    var base_tension = 0;

    if (mean_node != -1) {
        tension_node = mean_node;
        var ratio = clamp(tension_node / (total_nodes - 1), 0, 1);
        base_tension = max_tension * dsin(ratio * 180);
    }

    tension = floor(lerp(tension, base_tension, tension_interpolation));

    y = ystart + tension;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Construct
for (var n = 0; n &lt; total_nodes; ++n) {
    node_oy[n] = ystart;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw
for (var n = 0; n &lt; total_nodes; ++n) {
    draw_sprite(sprite_index, image_index, bbox_left + (n * node_width), node_oy[n]);
}

/*
var height;
for (var n = 0; n &lt; total_nodes; ++n) {
    height = tension;
    if (n &lt; tension_node) {
        height *= (n / tension_node);
    } else if (n &gt; tension_node) {
        height *= ((total_nodes - 1 - n) / (total_nodes - 1 - tension_node));
    }

    draw_sprite(sprite_index, image_index, bbox_left + (n * node_width), ystart + height);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
