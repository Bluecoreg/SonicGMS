<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>QuarterPipeMaskSprite</spriteName>
  <solid>0</solid>
  <visible>0</visible>
  <depth>1</depth>
  <persistent>0</persistent>
  <parentName>QuarterPipe</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="7" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Generate pipe

// get dimensions
var width = bbox_right - bbox_left;
var height = bbox_bottom - bbox_top;
var average = (width + height) * 0.5;

// divide into parts
var ideal_size = 16;
var total_parts = ceil(log10(average / ideal_size) / log10(2));
total_parts += total_parts - 1;
var x_scale = width / total_parts;
var y_scale = height / total_parts;

// get triangle dimensions
var part_width = sprite_get_width(TriangularMaskSprite) * sign(image_xscale);
var part_height = sprite_get_height(TriangularMaskSprite) * sign(image_yscale);

var ix = 0;
var iy = 0;
var px, py, m1, m2, ox, oy;

// create pipe
for (var n = 0; n &lt; total_parts; ++n) {
    px = ix;
    py = iy;

    // calculate intersection
    m1 = (total_parts - n) / (n + 1);
    m2 = (total_parts - (n + 1)) / (n + 2);

    ix = (-n + (n + 1)) / (m1 - m2);
    iy = (ix * m1) + n;

    ix *= x_scale;
    iy *= y_scale;

    // calculate positioning
    if (image_xscale &gt; 0) {
        ox = bbox_right - px;
    } else {
        ox = bbox_left + px;
    }

    if (image_yscale &lt; 0) {
        oy = bbox_bottom - py;
    } else {
        oy = bbox_top + py;
    }

    // place triangle
    with (instance_create(ox, oy, RightTriangle)) {
        // scale across intersections
        image_xscale = (ix - px) / part_width;
        image_yscale = (iy - py) / part_height;
        x -= sprite_width; // space correction

        // copy attributes
        depth = other.depth;
        depth_mask = other.depth_mask;
        top_solid = other.top_solid;
        bottom_solid = other.bottom_solid;
        sticky = other.sticky;
        auto_normal = false;

        // may as well calculate surface direction, too ...
        event_perform(ev_other, ev_room_start);
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>203</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>1</exetype>
        <functionname>action_kill_object</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>0,0</point>
    <point>16,16</point>
  </PhysicsShapePoints>
</object>
